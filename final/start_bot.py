"""
Enhanced Startup Script for University Confession Bot
"""

import sys
import os
import logging
from pathlib import Path

# Add the bot directory to Python path
bot_dir = Path(__file__).parent
sys.path.insert(0, str(bot_dir))

def check_dependencies():
    """Check if core required dependencies are installed"""
    critical_packages = [
        'telegram', 'schedule'
    ]
    
    missing_packages = []
    
    for package in critical_packages:
        try:
            if package == 'telegram':
                import telegram.ext
            else:
                __import__(package)
        except ImportError:
            if package == 'telegram':
                missing_packages.append('python-telegram-bot')
            else:
                missing_packages.append(package)
    
    if missing_packages:
        print("‚ùå Missing critical packages:")
        for package in missing_packages:
            print(f"   - {package}")
        print("\nüîß To install missing packages, run:")
        print("   pip install -r requirements.txt")
        return False
    
    print("‚úÖ Core dependencies are installed!")
    return True

def check_configuration():
    """Check if configuration is properly set"""
    from config import BOT_TOKEN, CHANNEL_ID, ADMIN_IDS
    
    issues = []
    
    if not BOT_TOKEN or "YOUR_" in BOT_TOKEN:
        issues.append("‚ùå BOT_TOKEN is not properly set in Replit secrets")
    
    if not CHANNEL_ID:
        issues.append("‚ùå CHANNEL_ID is not set in Replit secrets")
    
    if not ADMIN_IDS:
        issues.append("‚ùå No admin IDs configured in Replit secrets")
    
    if issues:
        print("üîß Configuration Issues Found:")
        for issue in issues:
            print(f"   {issue}")
        return False
    
    print("‚úÖ Configuration looks good!")
    print(f"   üì± Bot Token: {BOT_TOKEN[:10]}...")
    print(f"   üì¢ Channel ID: {CHANNEL_ID}")
    print(f"   üë§ Admin IDs: {len(ADMIN_IDS)} admin(s)")
    return True

def main():
    """Main startup function"""
    print("ü§ñ Starting University Confession Bot...")
    print("=" * 50)
    
    # Check dependencies
    print("1Ô∏è‚É£  Checking dependencies...")
    if not check_dependencies():
        print("\n‚ùå Startup failed due to missing dependencies.")
        return False
    
    # Check configuration
    print("\n2Ô∏è‚É£  Checking configuration...")
    if not check_configuration():
        print("\n‚ùå Startup failed due to configuration issues.")
        return False
    
    # Check database
    print("\n3Ô∏è‚É£  Initializing database...")
    try:
        from db import init_db
        init_db()
        print("‚úÖ Database initialized successfully!")
    except Exception as e:
        print(f"‚ùå Database initialization failed: {e}")
        return False
    
    # Check migrations
    print("\n4Ô∏è‚É£  Running database migrations...")
    try:
        from migrations import run_migrations
        if run_migrations():
            print("‚úÖ Database migrations completed!")
        else:
            print("‚ö†Ô∏è  Some migrations may have failed, but continuing...")
    except Exception as e:
        print(f"‚ö†Ô∏è  Migration error (continuing anyway): {e}")
    
    # Start the bot
    print("\n5Ô∏è‚É£  Starting the bot...")
    try:
        from bot import main as bot_main
        print("‚úÖ All systems ready!")
        print("üöÄ Starting University Confession Bot...")
        print("=" * 50)
        print("üìù Bot Features:")
        print("   ‚Ä¢ Anonymous confessions & questions")
        print("   ‚Ä¢ Comment system with likes/dislikes")
        print("   ‚Ä¢ Admin moderation panel")
        print("   ‚Ä¢ Rate limiting & spam protection")
        print("   ‚Ä¢ Analytics & reporting")
        print("   ‚Ä¢ Automated backups")
        print("   ‚Ä¢ Advanced error handling")
        print("=" * 50)
        print("‚ÑπÔ∏è  Press Ctrl+C to stop the bot")
        print()
        
        bot_main()
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Bot stopped by user.")
        return True
    except Exception as e:
        print(f"\n‚ùå Bot startup failed: {e}")
        logging.exception("Bot startup error")
        return False

if __name__ == "__main__":
    success = main()
    if not success:
        input("\nPress Enter to exit...")
        sys.exit(1)
